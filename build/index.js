'use strict';

require('dotenv/config');

var _url = require('url');

var _twilio = require('./twilio');

var _utils = require('./utils');

(async function () {
  const PING_INTERVAL = parseInt(process.env.PING_INTERVAL, 10);
  const ALERT_PHONE = process.env.ALERT_PHONE;
  const ADT_USERNAME = process.env.ADT_USERNAME;
  const ADT_PASSWORD = process.env.ADT_PASSWORD;

  const { get, post } = (0, _utils.createRequest)();
  const loginPageResp = await get('https://portal.adtpulse.com/');
  const loginPageUrl = loginPageResp.request.href;
  const dashboardPageResp = await post(loginPageUrl, {
    form: {
      usernameForm: ADT_USERNAME,
      passwordForm: ADT_PASSWORD
    }
  });
  const dashboardPageUrl = dashboardPageResp.request.href;
  const ajaxUrl = (0, _url.resolve)(dashboardPageUrl, '../ajax/homeViewDevAjax.jsp');

  function getNextDashboardLoadTime() {
    return Date.now() + (Math.random() * 120 + 60) * 1000;
  }

  async function getDoorStatus() {
    const ajaxResp = await post(ajaxUrl);
    const homeView = JSON.parse(ajaxResp.body.trim());
    return homeView.items.filter(i => i.name.includes('Door')).reduce((acc, { name, state }) => Object.assign(acc, {
      [name]: state.statusTxt.includes('Closed') ? 'closed' : 'open'
    }), {});
  }

  const doorHistory = [{}, {}];
  let nextDashboardLoad = 0;
  while (true) {
    if (nextDashboardLoad <= Date.now()) {
      await get(dashboardPageUrl);
      nextDashboardLoad = getNextDashboardLoadTime();
    }

    doorHistory.unshift((await getDoorStatus()));
    doorHistory.length = 2;

    const [current, prev] = doorHistory;
    const doorNames = (0, _utils.uniq)([...Object.keys(current), ...Object.keys(prev)]);

    for (const doorName of doorNames) {
      if (!prev[doorName]) {
        console.log('initialized', doorName);
        continue;
      }

      if (current[doorName] === prev[doorName]) {
        continue;
      }

      console.log(doorName, ':', prev[doorName], '->', current[doorName]);
      await (0, _twilio.sendMessage)(ALERT_PHONE, `${doorName} is now ${current[doorName]}`);
    }

    await (0, _utils.sleep)(PING_INTERVAL);
  }
})().catch(err => console.log('FATAL ERROR', err.stack || err.message || err));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJQSU5HX0lOVEVSVkFMIiwicGFyc2VJbnQiLCJwcm9jZXNzIiwiZW52IiwiQUxFUlRfUEhPTkUiLCJBRFRfVVNFUk5BTUUiLCJBRFRfUEFTU1dPUkQiLCJnZXQiLCJwb3N0IiwibG9naW5QYWdlUmVzcCIsImxvZ2luUGFnZVVybCIsInJlcXVlc3QiLCJocmVmIiwiZGFzaGJvYXJkUGFnZVJlc3AiLCJmb3JtIiwidXNlcm5hbWVGb3JtIiwicGFzc3dvcmRGb3JtIiwiZGFzaGJvYXJkUGFnZVVybCIsImFqYXhVcmwiLCJnZXROZXh0RGFzaGJvYXJkTG9hZFRpbWUiLCJEYXRlIiwibm93IiwiTWF0aCIsInJhbmRvbSIsImdldERvb3JTdGF0dXMiLCJhamF4UmVzcCIsImhvbWVWaWV3IiwiSlNPTiIsInBhcnNlIiwiYm9keSIsInRyaW0iLCJpdGVtcyIsImZpbHRlciIsImkiLCJuYW1lIiwiaW5jbHVkZXMiLCJyZWR1Y2UiLCJhY2MiLCJzdGF0ZSIsIk9iamVjdCIsImFzc2lnbiIsInN0YXR1c1R4dCIsImRvb3JIaXN0b3J5IiwibmV4dERhc2hib2FyZExvYWQiLCJ1bnNoaWZ0IiwibGVuZ3RoIiwiY3VycmVudCIsInByZXYiLCJkb29yTmFtZXMiLCJrZXlzIiwiZG9vck5hbWUiLCJjb25zb2xlIiwibG9nIiwiY2F0Y2giLCJlcnIiLCJzdGFjayIsIm1lc3NhZ2UiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBRUMsbUJBQWtCO0FBQ2pCLFFBQU1BLGdCQUFnQkMsU0FBU0MsUUFBUUMsR0FBUixDQUFZSCxhQUFyQixFQUFvQyxFQUFwQyxDQUF0QjtBQUNBLFFBQU1JLGNBQWNGLFFBQVFDLEdBQVIsQ0FBWUMsV0FBaEM7QUFDQSxRQUFNQyxlQUFlSCxRQUFRQyxHQUFSLENBQVlFLFlBQWpDO0FBQ0EsUUFBTUMsZUFBZUosUUFBUUMsR0FBUixDQUFZRyxZQUFqQzs7QUFFQSxRQUFNLEVB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bGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnZG90ZW52L2NvbmZpZydcbmltcG9ydCB7IHJlc29sdmUgYXMgcmVzb2x2ZVVybCB9IGZyb20gJ3VybCdcblxuaW1wb3J0IHsgc2VuZE1lc3NhZ2UgfSBmcm9tICcuL3R3aWxpbydcbmltcG9ydCB7IGNyZWF0ZVJlcXVlc3QsIHVuaXEsIHNsZWVwIH0gZnJvbSAnLi91dGlscydcblxuKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgUElOR19JTlRFUlZBTCA9IHBhcnNlSW50KHByb2Nlc3MuZW52LlBJTkdfSU5URVJWQUwsIDEwKVxuICBjb25zdCBBTEVSVF9QSE9ORSA9IHByb2Nlc3MuZW52LkFMRVJUX1BIT05FXG4gIGNvbnN0IEFEVF9VU0VSTkFNRSA9IHByb2Nlc3MuZW52LkFEVF9VU0VSTkFNRVxuICBjb25zdCBBRFRfUEFTU1dPUkQgPSBwcm9jZXNzLmVudi5BRFRfUEFTU1dPUkRcblxuICBjb25zdCB7IGdldCwgcG9zdCB9ID0gY3JlYXRlUmVxdWVzdCgpXG4gIGNvbnN0IGxvZ2luUGFnZVJlc3AgPSBhd2FpdCBnZXQoJ2h0dHBzOi8vcG9ydGFsLmFkdHB1bHNlLmNvbS8nKVxuICBjb25zdCBsb2dpblBhZ2VVcmwgPSBsb2dpblBhZ2VSZXNwLnJlcXVlc3QuaHJlZlxuICBjb25zdCBkYXNoYm9hcmRQYWdlUmVzcCA9IGF3YWl0IHBvc3QobG9naW5QYWdlVXJsLCB7XG4gICAgZm9ybToge1xuICAgICAgdXNlcm5hbWVGb3JtOiBBRFRfVVNFUk5BTUUsXG4gICAgICBwYXNzd29yZEZvcm06IEFEVF9QQVNTV09SRFxuICAgIH1cbiAgfSlcbiAgY29uc3QgZGFzaGJvYXJkUGFnZVVybCA9IGRhc2hib2FyZFBhZ2VSZXNwLnJlcXVlc3QuaHJlZlxuICBjb25zdCBhamF4VXJsID0gcmVzb2x2ZVVybChkYXNoYm9hcmRQYWdlVXJsLCAnLi4vYWpheC9ob21lVmlld0RldkFqYXguanNwJylcblxuICBmdW5jdGlvbiBnZXROZXh0RGFzaGJvYXJkTG9hZFRpbWUgKCkge1xuICAgIHJldHVybiBEYXRlLm5vdygpICsgKCgoTWF0aC5yYW5kb20oKSAqIDEyMCkgKyA2MCkgKiAxMDAwKVxuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gZ2V0RG9vclN0YXR1cyAoKSB7XG4gICAgY29uc3QgYWpheFJlc3AgPSBhd2FpdCBwb3N0KGFqYXhVcmwpXG4gICAgY29uc3QgaG9tZVZpZXcgPSBKU09OLnBhcnNlKGFqYXhSZXNwLmJvZHkudHJpbSgpKVxuICAgIHJldHVybiBob21lVmlldy5pdGVtc1xuICAgICAgLmZpbHRlcihpID0+IGkubmFtZS5pbmNsdWRlcygnRG9vcicpKVxuICAgICAgLnJlZHVjZShcbiAgICAgICAgKGFjYywgeyBuYW1lLCBzdGF0ZSB9KSA9PiBPYmplY3QuYXNzaWduKGFjYywge1xuICAgICAgICAgIFtuYW1lXTogc3RhdGUuc3RhdHVzVHh0LmluY2x1ZGVzKCdDbG9zZWQnKSA/ICdjbG9zZWQnIDogJ29wZW4nXG4gICAgICAgIH0pLFxuICAgICAgICB7fVxuICAgICAgKVxuICB9XG5cbiAgY29uc3QgZG9vckhpc3RvcnkgPSBbe30sIHt9XVxuICBsZXQgbmV4dERhc2hib2FyZExvYWQgPSAwXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgaWYgKG5leHREYXNoYm9hcmRMb2FkIDw9IERhdGUubm93KCkpIHtcbiAgICAgIGF3YWl0IGdldChkYXNoYm9hcmRQYWdlVXJsKVxuICAgICAgbmV4dERhc2hib2FyZExvYWQgPSBnZXROZXh0RGFzaGJvYXJkTG9hZFRpbWUoKVxuICAgIH1cblxuICAgIGRvb3JIaXN0b3J5LnVuc2hpZnQoYXdhaXQgZ2V0RG9vclN0YXR1cygpKVxuICAgIGRvb3JIaXN0b3J5Lmxlbmd0aCA9IDJcblxuICAgIGNvbnN0IFtjdXJyZW50LCBwcmV2XSA9IGRvb3JIaXN0b3J5XG4gICAgY29uc3QgZG9vck5hbWVzID0gdW5pcShbXG4gICAgICAuLi5PYmplY3Qua2V5cyhjdXJyZW50KSxcbiAgICAgIC4uLk9iamVjdC5rZXlzKHByZXYpXG4gICAgXSlcblxuICAgIGZvciAoY29uc3QgZG9vck5hbWUgb2YgZG9vck5hbWVzKSB7XG4gICAgICBpZiAoIXByZXZbZG9vck5hbWVdKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdpbml0aWFsaXplZCcsIGRvb3JOYW1lKVxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBpZiAoY3VycmVudFtkb29yTmFtZV0gPT09IHByZXZbZG9vck5hbWVdKSB7XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIGNvbnNvbGUubG9nKGRvb3JOYW1lLCAnOicsIHByZXZbZG9vck5hbWVdLCAnLT4nLCBjdXJyZW50W2Rvb3JOYW1lXSlcbiAgICAgIGF3YWl0IHNlbmRNZXNzYWdlKEFMRVJUX1BIT05FLCBgJHtkb29yTmFtZX0gaXMgbm93ICR7Y3VycmVudFtkb29yTmFtZV19YClcbiAgICB9XG5cbiAgICBhd2FpdCBzbGVlcChQSU5HX0lOVEVSVkFMKVxuICB9XG59KCkpXG4uY2F0Y2goZXJyID0+IGNvbnNvbGUubG9nKCdGQVRBTCBFUlJPUicsIGVyci5zdGFjayB8fCBlcnIubWVzc2FnZSB8fCBlcnIpKVxuIl19